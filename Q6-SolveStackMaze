package com.mycompany.solvestackmaze;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.Stack;

/**
 *
 * @author ianazimov
 */
public class SolveStackMaze {

     public static boolean solveMaze(int[][] maze) {
         
         //make a variable to hold how many rows and columns there are in the maze
        int rows = maze.length;
        int cols = maze[0].length;
        
        //make a stack of int array
        Stack<int[]> stack = new Stack<>();
        
        //make a hashset that holds all visited values within the 2d array
        Set<String> visited = new HashSet<>();

        //this is the position that the the program starts in the maze
        int[] start = {0, 0};
        //push the start value onto the stack
        stack.push(start);
        //this adds all the neighbors of start to visitor, starting the 
        visited.add(Arrays.toString(start));

        //while the stack is not empty, (isn't because we added start)
        while (!stack.isEmpty()) {
            //to calculate current cell, we use peek method
            int[] currentCell = stack.peek();
            //x and y are used to help store our position
            int x = currentCell[0];
            int y = currentCell[1];

            //if the x and y value are equal to the size of the array, the maze has been solved
            if (x == rows - 1 && y == cols - 1) {
                System.out.println("Maze solved!");
                return true;
            }

            //make an arraylist for all neighbors of current cell
            List<int[]> neighbors = new ArrayList<>();

            // Check neighbors (up, down, left, right, in that order) for valid pathways
            if (x > 0 && maze[x - 1][y] == 0 && !visited.contains(Arrays.toString(new int[]{x - 1, y}))) {
                neighbors.add(new int[]{x - 1, y});  
            }
            if (x < rows - 1 && maze[x + 1][y] == 0 && !visited.contains(Arrays.toString(new int[]{x + 1, y}))) {
                neighbors.add(new int[]{x + 1, y});  
            }
            if (y > 0 && maze[x][y - 1] == 0 && !visited.contains(Arrays.toString(new int[]{x, y - 1}))) {
                neighbors.add(new int[]{x, y - 1});  
            }
            if (y < cols - 1 && maze[x][y + 1] == 0 && !visited.contains(Arrays.toString(new int[]{x, y + 1}))) {
                neighbors.add(new int[]{x, y + 1});  
            }

           //if the neighbors array is not empty, a random index is spawned
            if (!neighbors.isEmpty()) {
                // the next cell is one of those randomIndex
                int randomIndex = new Random().nextInt(neighbors.size());
                int[] nextCell = neighbors.get(randomIndex);
                //we push that nextCell to the index, and add it to visited
                stack.push(nextCell);
                
                visited.add(Arrays.toString(nextCell));
                //otherwise we pop it off the stack
            } else {
                stack.pop();
            }
        }

        System.out.println("No solution found.");
        return false;
    }

     
    public static void main(String[] args) {
        // maze to be solved, 0 is a path, 1 is a wall
        int[][] maze = {
                {0, 0, 0, 0, 0},
                {1, 0, 1, 1, 0},
                {0, 0, 0, 1, 0},
                {1, 1, 0, 1, 0},
                {0, 0, 0, 0, 0}
        };

        //call solveMaze method
        solveMaze(maze);
    }
}
